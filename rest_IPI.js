// async/await

const regions = [`Africa`, `Americas`, `Asia`, `Europe`, `Oceania`];
const API_Countries = `https://restcountries.com/v3.1`;

// const getCapitalsByRegion = (region) => {
//   return fetch(API_Countries + `/region/${region}`)
//     .then((response) => response.json())
//     .then((countries) => {
//       let capitals = countries
//         .slice(0, 3)
//         .map((country) => country.capital[0]);

//       return Promise.all(
//         capitals.map((capital) =>
//           fetch(API_Countries + `/capital/${capital}`)
//             .then((response) => response.json())
//             .then((capital) => capital[0])
//         )
//       );
//     })
//     .then((capitalsInfo) =>
//       capitalsInfo.map(
//         (item) =>
//           `${item.capital[0]} is a capital of ${item.flag} ${item.name.common}.`
//       )
//     );
// };

// const getCapitalsByRegion = async (region) => {
//   let countries = await fetch(API_Countries + `/region/${region}`).then(data => data.json());

//   let capitals = countries.slice(0, 3).map((country) => country.capital[0]);

//   let capitalsInfo = await Promise.all(
//     capitals.map((capital) =>
//       fetch(API_Countries + `/capital/${capital}`)
//         .then((response) => response.json())
//         .then((capital) => capital[0])
//     )
//   );

//   return capitalsInfo.map(
//     (item) =>
//       `${item.capital[0]} is a capital of ${item.flag} ${item.name.common}.`
//   );
// };

// getCapitalsByRegion(`Africa`)
//     .then(data => console.log(data));

// (async () => {
//     let regionData = await Promise.all(regions.map(region => getCapitalsByRegion(region)));
//     console.log(regionData);
// })()

// fetch(`https://restcountries.com/v3.1/region/europe`)
//     .then(data => data.json())
//     .then(data => {
//         console.log(data);
//     })
//     .catch(err => console.log(err))
//     .finally(() => console.log(`in finally`))

// (async () => {
//     try{
//         let countriesRequest = await fetch(`https://restcountries.com/v3.1/region/europe`);
//         let countriesResponse;

//         if(countriesRequest.status !== 200){
//             throw countriesRequest.status;
//         } else{
//             countriesResponse = countriesRequest.json();
//         }

//         console.log(countriesResponse);

//     } catch(err){
//         console.log(err);
//     } finally{
//         console.log(`in finally`)
//     }
// })()

// try/catch/finally

// CRUD-system

// METHOD
// 	GET ‚Äì –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
// 	POST * ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (body)
// 	PUT * ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞)
// 	PATCH * ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
// 	DELETE

// HEADERS ‚Äì —Å–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∫–æ–¥–∏—Ä–æ–≤–∫–∞, —Å–∂–∞—Ç–∏–µ, —Å–µ—Ä–≤–µ—Ä, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ)

// REST

// https://jsonplaceholder.typicode.com/

// REST ‚Äì –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–ª–∏–µ–Ω—Ç-—Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
// —Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π), –ø–æ –∫–æ—Ç–æ—Ä—ã–º –∫–ª–∏–µ–Ω—Ç (web app, mobile app) –∏ —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å

// REST –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –¥—É–º–∞—Ç—å –æ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∫–∞–∫ –æ —Ä–µ—Å—É—Ä—Å–µ.
// –£ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å—Ç—å —Å–≤–æ–π URL.

// LIST ‚Äì GET /posts // ‚Äì –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Å—É—Ä—Å posts
// ITEM ‚Äì GET /posts/:id // ‚Äì –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Å—É—Ä—Å posts —Å :id

// ADD ‚Äì POST /posts     body:{name: Alex, age: 21} // ‚Äì –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Å—É—Ä—Å posts c —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞, id –≤—Å–µ–≥–¥–∞ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä
// <== {id: 101, name: Alex, age: 21}

// FULL UPDATE ‚Äì PUT /posts/:id  body:{name: Ivan} // –≤ body –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞
// <== {id: 101, name: Ivan}

// PARTIAL UPDATE ‚Äì PATCH /posts/:id body:{name: ''} // –≤ body –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
// <== {id: 101, name: '', age: 21}

// DELETE ‚Äì /posts/:id
// <== {}

// RESTfull Api ‚Äì —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—å –≤ –≤–∞–∫—É—É–º–µ üòå

const API = `https://jsonplaceholder.typicode.com`;

(async () => {
    let posts = await fetch(API+`/posts`).then(data => data.json());
    console.log(posts);

    let lastPostId = posts[posts.length-1].id;

    let lastPost = await fetch(API+`/posts/${lastPostId}`).then(data => data.json());
    console.log(lastPost);

    let lastPostComments = await fetch(API+`/posts/${lastPostId}/comments`).then(data => data.json());
    console.log(lastPostComments);

    let commentsOfLastPost = await fetch(API+`/comments?postId=${lastPostId}`).then(data => data.json());
    console.log(commentsOfLastPost);

    let newPost = await fetch(API+`/posts`, {
        method: `POST`,
        headers: {
            "Content-type": "application/json"
        },
        body: JSON.stringify({title: `New post`, body: `My content`})
    }).then(data => data.json());

    console.log(newPost);

    let postPut = await fetch(API+`/posts/1`, {
        method: `PUT`,
        headers: {
            "Content-type": "application/json"
        },
        body: JSON.stringify({title: `hello`})
    }).then(data => data.json());

    console.log(postPut);

    let postPatch = await fetch(API+`/posts/1`, {
        method: `PATCH`,
        headers: {
            "Content-type": "application/json"
        },
        body: JSON.stringify({title: `hello`})
    }).then(data => data.json());

    console.log(postPatch);

    let postDelete = await fetch(API+`/posts/1`, {method: `DELETE`}).then(data => data.json());
    console.log(postDelete);

})()